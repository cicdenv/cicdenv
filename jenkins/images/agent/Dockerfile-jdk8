#
# Multi-stage: Jenkins CLI (jenkins-cli.jar) from upstream
#
ARG jenkinsVersion
FROM jenkins/jenkins:${jenkinsVersion} as jenkins_server
ARG jenkinsVersion
WORKDIR /tmp
RUN unzip /usr/share/jenkins/jenkins.war "WEB-INF/lib/cli-${jenkinsVersion}.jar"

#
# Multi-stage: docker client
#
FROM openjdk:8-jdk as docker_install
ARG jenkinsVersion
RUN apt update                  \
  && apt install -y             \
     apt-transport-https        \
     ca-certificates            \
     curl                       \
     software-properties-common \
  && curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - \
  && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(cat /etc/os-release | grep VERSION= | sed 's/["()]//g' | cut -d' ' -f2) stable" \
  && apt update \
  && apt install -y docker-ce \
  && apt install -y pbzip2

#
# Final Jenkins Agent
#
FROM openjdk:8-jdk
ARG jenkinsVersion

# Install OpenSSH client
RUN apt-get update && apt-get install -y --no-install-recommends apt-utils curl git libltdl7 openssh-client \
 && rm -rf /var/lib/apt/lists/*

# Docker client from multi-stage
COPY --from=docker_install /usr/bin/docker /usr/bin/docker

# Jenkins CLI (jenkins-cli.jar) from multi-stage 
RUN mkdir -p /usr/share/jenkins
COPY --from=jenkins_server "/tmp/WEB-INF/lib/cli-${jenkinsVersion}.jar" /usr/share/jenkins/jenkins-cli.jar

# Install remoting jar
ARG REMOTING_VERSION=4.0
ARG RELEASES_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting
RUN curl --create-dirs -sSLo /usr/share/jenkins/agent.jar ${RELEASES_URL}/${REMOTING_VERSION}/remoting-${REMOTING_VERSION}.jar \
 && chmod 755 /usr/share/jenkins \
 && chmod 644 /usr/share/jenkins/agent.jar

# Jenkins service user
ARG user=jenkins
ARG group=jenkins
ARG uid=8008
ARG gid=8008
ARG HOME=/var/lib/jenkins
ENV HOME ${HOME}
RUN groupadd -g ${gid} ${group} \
 && useradd -d "$HOME" -u ${uid} -g ${gid} -m -s /bin/bash ${user} \
 && mkdir -p "${HOME}/.ssh" \
 && { \
    echo 'Host *';                            \
    echo '    StrictHostKeyChecking no';      \
    echo '    UserKnownHostsFile=/dev/null';  \
    echo '    ServerAliveInterval 30';        \
 } > "${HOME}/.ssh/config" \
 && chown -R jenkins:jenkins "${HOME}/.ssh" \
 && chmod 700 "${HOME}/.ssh" \
 && chmod 600 "${HOME}/.ssh/config"

# Put jenkins user in the docker group
ARG docker_gid=8088
RUN groupadd -g ${docker_gid} docker
RUN usermod -aG docker jenkins

# Agent jar cache folder
ARG JAR_CACHE_DIR=${HOME}/jar-cache
ENV JAR_CACHE_DIR ${JAR_CACHE_DIR}
RUN mkdir -p ${JAR_CACHE_DIR} \
 && chown -R jenkins:jenkins "${JAR_CACHE_DIR}"

# Agent workspace path
RUN mkdir -p "${HOME}/workspace" \
 && chown jenkins:jenkins "${HOME}/workspace"
VOLUME "${HOME}/workspace"

# Agent cache path
RUN mkdir -p "${HOME}/cache" \
 && chown jenkins:jenkins "${HOME}/cache"
VOLUME "${HOME}/cache"

# Install AWS ECR credential helper
# https://github.com/awslabs/amazon-ecr-credential-helper/issues/215
# ARG ECR_CREDS_VERSION=0.4.0
# RUN curl --create-dirs -sSLo /usr/bin/docker-credential-ecr-login \
#  https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/${ECR_CREDS_VERSION}/linux-amd64/docker-credential-ecr-login \
#  && chmod +x /usr/bin/docker-credential-ecr-login
RUN curl --create-dirs -sSLo /usr/bin/docker-credential-ecr-login \
  https://github.com/fred-vogt/amazon-ecr-credential-helper/releases/download/v0.4.1/docker-credential-ecr-login \
 && chmod +x /usr/bin/docker-credential-ecr-login

#
# Install AWS CLI
#
RUN apt-get update                     \
 && apt-get install -y                 \
  python3                              \
  python3-setuptools                   \
  python3-dev                          \
  python3-pip                          \
  jq                                   \
 && pip3 --no-cache-dir install awscli \
 && rm -rf /var/lib/apt/lists/*

# Custom java.util.logging configs
COPY files/*.properties /var/lib/jenkins/

# Container entry-point agent launcher
COPY jenkins-agent-jdk8.sh /usr/local/bin/jenkins-agent.sh

USER jenkins

WORKDIR ${HOME}

ENTRYPOINT ["/usr/local/bin/jenkins-agent.sh"]
