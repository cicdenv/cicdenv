Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
# Copyright 2016 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL=https://artifacts.k8s.io/binaries/kops/1.16.0-beta.2/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.16.0-beta.2/linux-amd64-nodeup,https://kubeupv2.s3.amazonaws.com/kops/1.16.0-beta.2/linux/amd64/nodeup
NODEUP_HASH=aeffb37f5f6dc701688201208c01031504d7681bc4badd1ef62ba2b49e570f14

export AWS_REGION=us-west-2




function ensure-install-dir() {
  INSTALL_DIR="/var/cache/kubernetes-install"
  # On ContainerOS, we install to /var/lib/toolbox install (because of noexec)
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kubernetes-install"
  fi
  mkdir -p ${INSTALL_DIR}
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  # TODO(zmerlynn): Now we REALLY have no excuse not to do the reboot
  # optimization.

  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  # In case of failure checking integrity of release, retry.
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

cat > cluster_spec.yaml << '__EOF_CLUSTER_SPEC'
cloudConfig: null
docker:
  ipMasq: false
  ipTables: false
  logDriver: json-file
  logLevel: warn
  logOpt:
  - max-size=10m
  - max-file=5
  storage: overlay2,overlay,aufs
  version: 18.09.9
encryptionConfig: null
etcdClusters:
  events:
    version: 3.3.10
  main:
    version: 3.3.10
fileAssets:
- content: G9QNcOoZ/UdZoKP8KQIBHO5Ig/o= (fingerprint)
  name: kubernetes-audit
  path: /srv/kubernetes/audit.yaml
kubeAPIServer:
  allowPrivileged: true
  anonymousAuth: false
  apiServerCount: 3
  auditLogMaxAge: 10
  auditLogMaxBackups: 1
  auditLogMaxSize: 100
  auditLogPath: /var/log/kube-apiserver-audit.log
  auditPolicyFile: /srv/kubernetes/audit.yaml
  authorizationMode: RBAC
  bindAddress: 0.0.0.0
  cloudProvider: aws
  enableAdmissionPlugins:
  - NamespaceLifecycle
  - LimitRanger
  - ServiceAccount
  - PersistentVolumeLabel
  - DefaultStorageClass
  - DefaultTolerationSeconds
  - MutatingAdmissionWebhook
  - ValidatingAdmissionWebhook
  - NodeRestriction
  - ResourceQuota
  etcdServers:
  - http://127.0.0.1:4001
  etcdServersOverrides:
  - /events#http://127.0.0.1:4002
  image: k8s.gcr.io/kube-apiserver:v1.16.6
  insecureBindAddress: 127.0.0.1
  insecurePort: 8080
  kubeletPreferredAddressTypes:
  - InternalIP
  - Hostname
  - ExternalIP
  logLevel: 2
  requestheaderAllowedNames:
  - aggregator
  requestheaderExtraHeaderPrefixes:
  - X-Remote-Extra-
  requestheaderGroupHeaders:
  - X-Remote-Group
  requestheaderUsernameHeaders:
  - X-Remote-User
  securePort: 443
  serviceClusterIPRange: 100.64.0.0/13
  storageBackend: etcd3
kubeControllerManager:
  allocateNodeCIDRs: true
  attachDetachReconcileSyncPeriod: 1m0s
  cloudProvider: aws
  clusterCIDR: 100.96.0.0/11
  clusterName: 1-16-a-dev.kops.cicdenv.com
  configureCloudRoutes: false
  image: k8s.gcr.io/kube-controller-manager:v1.16.6
  leaderElection:
    leaderElect: true
  logLevel: 2
  useServiceAccountCredentials: true
kubeProxy:
  clusterCIDR: 100.96.0.0/11
  cpuRequest: 100m
  hostnameOverride: '@aws'
  image: k8s.gcr.io/kube-proxy:v1.16.6
  logLevel: 2
kubeScheduler:
  image: k8s.gcr.io/kube-scheduler:v1.16.6
  leaderElection:
    leaderElect: true
  logLevel: 2
kubelet:
  anonymousAuth: false
  cgroupRoot: /
  cloudProvider: aws
  clusterDNS: 100.64.0.10
  clusterDomain: cluster.local
  enableDebuggingHandlers: true
  evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%
  hostnameOverride: '@aws'
  kubeconfigPath: /var/lib/kubelet/kubeconfig
  logLevel: 2
  networkPluginName: cni
  nonMasqueradeCIDR: 100.64.0.0/10
  podInfraContainerImage: k8s.gcr.io/pause-amd64:3.0
  podManifestPath: /etc/kubernetes/manifests
masterKubelet:
  anonymousAuth: false
  cgroupRoot: /
  cloudProvider: aws
  clusterDNS: 100.64.0.10
  clusterDomain: cluster.local
  enableDebuggingHandlers: true
  evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%
  hostnameOverride: '@aws'
  kubeconfigPath: /var/lib/kubelet/kubeconfig
  logLevel: 2
  networkPluginName: cni
  nonMasqueradeCIDR: 100.64.0.0/10
  podInfraContainerImage: k8s.gcr.io/pause-amd64:3.0
  podManifestPath: /etc/kubernetes/manifests
  registerSchedulable: false

__EOF_CLUSTER_SPEC

cat > ig_spec.yaml << '__EOF_IG_SPEC'
kubelet: null
nodeLabels:
  kops.k8s.io/instancegroup: master-us-west-2a
taints: null

__EOF_IG_SPEC

cat > kube_env.yaml << '__EOF_KUBE_ENV'
Assets:
- 47b99b6b9c4654a3fd5e3f093763429f8a6007f788bd7394bd0b85cb7ae4b2d0@https://storage.googleapis.com/kubernetes-release/release/v1.16.6/bin/linux/amd64/kubelet
- 05aae29c6e96fc07db195878263d3b625b623b9f16f87851e4a8ed8d234bcc2d@https://storage.googleapis.com/kubernetes-release/release/v1.16.6/bin/linux/amd64/kubectl
- 3ca15c0a18ee830520cf3a95408be826cbd255a1535a38e0be9608b25ad8bf64@https://storage.googleapis.com/kubernetes-release/network-plugins/cni-plugins-amd64-v0.7.5.tgz
- 7a6c754789aefbbbd61bef457e9f85012ffe6e0567dcae0b06cc14ec41b029ab@https://artifacts.k8s.io/binaries/kops/1.16.0-beta.2/linux/amd64/utils.tar.gz,https://github.com/kubernetes/kops/releases/download/v1.16.0-beta.2/linux-amd64-utils.tar.gz,https://kubeupv2.s3.amazonaws.com/kops/1.16.0-beta.2/linux/amd64/utils.tar.gz
ClusterName: 1-16-a-dev.kops.cicdenv.com
ConfigBase: s3://kops.cicdenv.com/1-16-a-dev.kops.cicdenv.com
InstanceGroupName: master-us-west-2a
Tags:
- _automatic_upgrades
- _aws
channels:
- s3://kops.cicdenv.com/1-16-a-dev.kops.cicdenv.com/addons/bootstrap-channel.yaml
- s3://kops.cicdenv.com/1-16-a-dev.kops.cicdenv.com/addons/custom-channel.yaml
etcdManifests:
- s3://kops.cicdenv.com/1-16-a-dev.kops.cicdenv.com/manifests/etcd/main.yaml
- s3://kops.cicdenv.com/1-16-a-dev.kops.cicdenv.com/manifests/etcd/events.yaml
protokubeImage:
  hash: 70cfe28f93f1bdd0ed09b0bba90a9025264fc7a4278394772f8720962a53392b
  name: protokube:1.16.0-beta.2
  sources:
  - https://artifacts.k8s.io/binaries/kops/1.16.0-beta.2/images/protokube.tar.gz
  - https://github.com/kubernetes/kops/releases/download/v1.16.0-beta.2/images-protokube.tar.gz
  - https://kubeupv2.s3.amazonaws.com/kops/1.16.0-beta.2/images/protokube.tar.gz

__EOF_KUBE_ENV

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="a-setup-dns"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash

set -eu -o pipefail

#
# Fixed CoreDNS on nodes.
#   Needed on ubuntu 18.04
#

# Stop systemd-resolved
if systemctl is-active --quiet systemd-resolved; then
    systemctl disable systemd-resolved
    systemctl stop systemd-resolved
fi

# Link /etc/resolv.conf to /run/systemd/resolve/resolv.conf
if [[ "$(readlink -- /etc/resolv.conf)" == "../run/systemd/resolve/stub-resolv.conf" ]]; then
    rm -f "/etc/resolv.conf"
    ln -s "/run/systemd/resolve/resolv.conf" "/etc/resolv.conf"
fi

--MIMEBOUNDARY--
